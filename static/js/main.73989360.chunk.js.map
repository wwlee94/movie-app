{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","rating","map","index","key","App","state","_getMovies","a","_callApi","movies","console","log","setState","fetch","response","json","data","_renderMovies","movie","id","title_long","large_cover_image","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2WA2BA,SAASA,EAAT,GAAuC,IAAhBC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,IAC3B,OAEI,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,mBAI1D,SAASC,EAAT,GAAgC,IAAVC,EAAS,EAATA,MAClB,OACI,0BAAMF,UAAU,gBAAgBE,GAoCzBC,MAjEf,YAA6D,IAA5CJ,EAA2C,EAA3CA,MAAOH,EAAoC,EAApCA,OAAQQ,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,SACpC,OADwD,EAAVC,OAG1C,yBAAKN,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,KAEtC,yBAAKC,UAAU,iBACX,4BAAKD,GACL,yBAAKC,UAAU,iBACVI,EAAOG,KAAI,SAACL,EAAOM,GAAR,OAAkB,kBAACP,EAAD,CAAYQ,IAAKD,EAAON,MAAOA,QAEjE,yBAAKF,UAAU,mBACVK,MC+DNK,E,2MAnDbC,MAAQ,G,EAMRC,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLC,EADK,OAEXC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAEZH,WALS,2C,EASbD,S,sBAAW,8BAAAD,EAAA,+EAEgBM,MAAM,6DAFtB,cAEDC,EAFC,gBAGYA,EAASC,OAHrB,cAGDA,EAHC,yBAIAA,EAAKC,KAAKP,QAJV,kCAMPC,QAAQC,IAAR,MANO,0D,EAWXM,cAAgB,WAYd,OAVe,EAAKZ,MAAMI,OAAOR,KAAI,SAACiB,EAAOhB,GAC3C,OAAO,kBAAC,EAAD,CACLC,IAAKe,EAAMC,GACX1B,MAAOyB,EAAME,WACb9B,OAAQ4B,EAAMG,kBACdvB,OAAQoB,EAAMpB,OACdC,SAAUmB,EAAMnB,SAChBC,OAAQkB,EAAMlB,a,mFAhClBsB,KAAKhB,e,+BAuCcgB,KAAKjB,MAAhBI,OACR,OACE,yBAAKf,UAAW4B,KAAKjB,MAAMI,OAAS,MAAQ,gBACzCa,KAAKjB,MAAMI,OAASa,KAAKL,gBAAkB,mB,GA9ClCM,aCnBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.73989360.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css'\n\n// PropTypes 모듈 -> 부모 컴포넌트로부터 넘어오는 변수의 타입 검사해줌\n\n// Functional 컴포넌트\nfunction Movie({ title, poster, genres, synopsis, rating }) {\n    return (\n        // JSX는 class X, className O\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre, index) => <MovieGenre key={index} genre={genre} />)}\n                </div>\n                <div className=\"Movie__Synopsis\">\n                    {synopsis}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction MoviePoster({ poster, alt }) {\n    return (\n        // alt 넣으면 Hover 기능 \n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\n    )\n}\n\nfunction MovieGenre({ genre }) {\n    return (\n        <span className=\"Movie__Genre\">{genre}</span>\n    )\n}\n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired\n}\n\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired\n}\n// Class 컴포넌트\n// class Movie extends Component {\n//     static propTypes = {\n//         title: PropTypes.string.isRequired,\n//         poster: PropTypes.string.isRequired\n//     }\n\n//     render() { \n//         return (\n//             <div>\n//                 <MoviePoster poster={this.props.poster} />\n//                 <h1>{this.props.title}</h1>\n//             </div>\n//         )\n//     }\n// }\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n/*\n  - 리액트 사이클 -\n  사이클은 자동으로 발생함 내가 원하든 원하지 않든 ! \n  \n  컴포넌트가 존재하기 시작할 때 작동\n  Render: componentWillMount() -> render() -> componentDidMount()\n  api호출은 willMount 진행할 때 작업하고 render에 데이터 뿌려줌\n\n  데이터가 변경되었을 때 !\n  Update: componentWillReceiveProps() -> shouldComponentUpdate() == true -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n  - setState - \n  state는 이렇게 하면 render() 동작 안함 -> 꼭 ! setState써서 변경\n  Ex) this.state.greeting = 'Something' -> X\n      this.setState({greeting: 'Something'}) -> O\n  \n  - '...' 의 의미\n  '...'의미는 이전 리스트는 그대로 두고, 한개를 추가한다는 뜻\n  Ex)\n  ...this.state.movies,\n  {\n    title: \"This is a New Movie\",\n    poster: \"https://mblogthumb-phinf.pstatic.net/MjAxODAzMDRfNDIg/MDAxNTIwMTQ4ODYzNTI1.pafkG0llpCTnavxBCXoBl4stv5nDS3P-Xcj5CbZF9c8g.Eai6_HfOtmc45TPcoi4rZr0vQk0pu_LRvjigYShqu50g.PNG.feel940/image_1154452801520148641525.png?type=w800\"\n  }\n  //...this.state.movies // 이렇게하면 새로운 데이터는 위에 생성\n*/\n\nclass App extends Component {\n  state = {}\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    console.log(movies)\n    this.setState({\n      //movies : movies 와 동일 !\n      movies\n    })\n  }\n\n  _callApi = async () => {\n    try {\n      const response = await fetch(\"https://yts.mx/api/v2/list_movies.json?sort_by=like_count\")\n      const json = await response.json();\n      return json.data.movies\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  //데이터가 없을 때 로딩을 띄우고, 있으면 영화 정보가 보이도록\n  _renderMovies = () => {\n    // js의 map 기능 -> 조건에 따른 새로운 배열을 만들어줌 \n    const movies = this.state.movies.map((movie, index) => {\n      return <Movie\n        key={movie.id}\n        title={movie.title_long}\n        poster={movie.large_cover_image}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        rating={movie.rating}\n      />\n    })\n    return movies\n  }\n\n  render() {\n    const { movies } = this.state\n    return (\n      <div className={this.state.movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : \"Loading ...\"}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// 리액트돔은 1개의 컴포넌트를 렌더링(출력) 해줌 -> 어디에? 'root'에 !\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}